class ADRC is subclass of DTControl

instance variables

-- design parameters
protected kp: real;
protected kd: real;
protected b0: real;

-- variables
private discrete : seq  of real;
private discrete_dt : seq  of real;
private A_dt : seq  of real;
private B_dt : seq  of real;
private x_hat: seq of real;
private u: real;

operations

-- constructor for ADRC
public ADRC: real * real * real ==> ADRC
ADRC(wc, wo, b0_) ==
(
  kp := 0;
  kd := 0;
  b0 := 0;
  discrete := [0,0];
  discrete_dt := [0,0];
  A_dt := [0,0];
  B_dt := [0,0];
  x_hat := [0,0];
  u := 0;
  updataParams(wc, wo, b0_)
);
    
-- default constructor for PD
public ADRC: () ==> ADRC
ADRC() ==
    ADRC(DEF_WC, DEF_WO, DEF_B0);

public updataParams: real*real*real ==> ()
updataParams(p_wc, i_wo, d_b0) ==
(
	dcl wo: real := i_wo;
	dcl wc: real := p_wc;
	
	kp := wc*wc;
	kd := 2.0*wc;
  b0 := d_b0;
  u := 0;
  
  discrete := [-3.0*wo*DT, -3.0*wo*wo*DT, -wo*wo*wo*DT, 0, 0,
							 1.0*DT,   		           0,         	 0, 0, 0,
							 0,                 1.0*DT,          	 0, 0, 0,
							 0,       					 b0*DT,            0, 0, 0,
							 3.0*wo*DT,   3.0*wo*wo*DT,  wo*wo*wo*DT, 0, 0];
  
  discrete_dt := MatrixExponential(discrete);
  
  -- Just to keep track of the indicies 
  A_dt := [1, 2, 3,
  				6, 7, 8,
  				11, 12, 13];
				
  B_dt := [16, 17, 18,
  				21, 22, 23];	 
  
  -- Hard code the shit!
  A_dt(1) := discrete_dt(1);
  A_dt(2) := discrete_dt(2);
  A_dt(3) := discrete_dt(3);
  A_dt(4) := discrete_dt(6);
  A_dt(5) := discrete_dt(7);
  A_dt(6) := discrete_dt(8);
  A_dt(7) := discrete_dt(11);
  A_dt(8) := discrete_dt(12);
  A_dt(9) := discrete_dt(13);
  
  -- And do it again
  B_dt(1) := discrete_dt(16);
  B_dt(2) := discrete_dt(17);
  B_dt(3) := discrete_dt(18);
  B_dt(4) := discrete_dt(21);
  B_dt(5) := discrete_dt(22);
  B_dt(6) := discrete_dt(23);
  
  x_hat := [0, 0, 0];
);

-- calculates output, based on the error
public Output: real ==> real
Output(err) == 
(
	dcl tmp1: seq of real;
	dcl tmp2: seq of real;
	-- Calculate x_hat
	-- u is the control signal and y is the output of the system (the error),  u_obs = [u, y]
	--xhat = A_dt * x_hat + B_dt * u_obs;
	
	tmp1 := MatrixMultVector(3, 3, A_dt, x_hat);
	tmp2 := MatrixMultVector(2, 3, B_dt, [u, -err]); 
	
	x_hat(1) := tmp1(1) + tmp2(1);
	x_hat(2) := tmp1(2) + tmp2(2);
	x_hat(3) := tmp1(3) + tmp2(3);
	
	-- Now we can calculate the the control signal
	
	u := kp * (0 - x_hat(1)) - kd*x_hat(2);
	return (u - x_hat(3)/b0);
	

);

public MatrixExponential: seq of real ==> seq of real
MatrixExponential(a) ==
(
  -- Create empty matrix
	dcl e: seq of real := [0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0];
												 
	-- Create identity matrix
	dcl f: seq of real := [1, 0, 0, 0, 0,
												 0, 1, 0, 0, 0,
												 0, 0, 1, 0, 0,
												 0, 0, 0, 1, 0,
												 0, 0, 0, 0, 1];
	dcl k: real := 1;
	dcl s: real := 1;
	
	while IsSignificant(e,f) do
	(
		e := Add(1.0, e, 1.0, f);
		f := Multiply(a, f);
		s := 1.0/k;
		f := MultiplyScalar(f,s);
		k := k + 1
	);
	
	return e;
);


public Add: real * seq of real * real * seq of real ==> seq of real
Add(alpha, A, beta, B) ==
(
	dcl C: seq of real :=  [0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0];
for j = 0 to MATRIX_SIZE - 1 do
	(
		for i = 0 to MATRIX_SIZE - 1 do
		(
			C(i+j*MATRIX_SIZE + 1) := alpha * A(i+j*MATRIX_SIZE + 1) + beta * B(i+j*MATRIX_SIZE + 1);
		);
	);
	return C
);

public Multiply: seq of real * seq of real ==> seq of real
Multiply(A,B) ==
(
	dcl C: seq of real := [0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0];
	
	for i = 0 to MATRIX_SIZE-1 do
	(
		for j = 0 to MATRIX_SIZE-1 do
		(
			C(i+j*MATRIX_SIZE + 1) := 0.0;
			for k = 0 to MATRIX_SIZE-1 do
			(
				C(i+j*MATRIX_SIZE + 1) := C(i+j*MATRIX_SIZE + 1) + A(i+k*MATRIX_SIZE + 1) * B(k+j*MATRIX_SIZE + 1);
			);
		);
	);
	
	return C;
);

public IsSignificant: seq of real * seq of real ==> bool
IsSignificant(r,s) ==
(
	dcl t: real := 0;
	dcl tol: real := 0;
	dcl ret: bool := false;
	
	
	for j = 0 to MATRIX_SIZE -1 do
	(
		for i = 0 to MATRIX_SIZE -1 do
		(
			t := r(i+j*MATRIX_SIZE + 1) + s(i+j*MATRIX_SIZE + 1); 
			tol := EPSILON * abs(r(i+j*MATRIX_SIZE + 1));
				
			if tol < abs( r(i+j*MATRIX_SIZE + 1) - t ) 
    	then 
        return true;
     );
   );   
	
	
	return ret
);


public MultiplyScalar: seq of real * real ==> seq of real
MultiplyScalar(A, s) ==
(
	dcl C: seq of real := [0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0,
												 0, 0, 0, 0, 0];
	
	for j = 0 to MATRIX_SIZE - 1 do
	(
		for i = 0 to MATRIX_SIZE -1 do
		(
			C(i+j*MATRIX_SIZE + 1) := A(i+j*MATRIX_SIZE + 1) * s;
		);
	);
	
	return C;
);


public MatrixMultVector: real * real * seq of real * seq of real ==> seq of real
MatrixMultVector(n, m, A, x) ==
(
	dcl Ax: seq of real := [0, 0, 0, 0, 0,
												  0, 0, 0, 0, 0,
												  0, 0, 0, 0, 0,
												  0, 0, 0, 0, 0,
												  0, 0, 0, 0, 0];
	
	for i = 0 to m-1 do
	(
		Ax(i+1) := 0.0; -- Can i do this??
		for j = 0 to n-1 do
		(
			Ax(i+1) := Ax(i+1) + A(i+j*m+1) * x(j+1);
		);
	);
		
	return Ax;
);

values

-- defaults
DEF_WC: real = 0.8;  --P
DEF_WO: real = 2.88; --I
DEF_B0: real = 0.625;--D
EPSILON: real = 2.220446049250313E-016;
MATRIX_SIZE: int = 5;
DT: real = 1.0/50.0


end ADRC
class GuidanceController

	instance variables
		protected LookAheadDistance : real := 0.5;
		private fr: FileReader;
		private rt: Route;
		private WayPoint1: WayPoint;
		private WayPoint2: WayPoint;
	
	operations
	public GuidanceController:() ==> GuidanceController
		GuidanceController()==
		(
			dcl test : bool := true;
			
			rt := new Route([]);
			
			fr := new FileReader(rt);
			
			test := fr.LoadTravlRoute(System`hwi.fname.getValue());
			
			
			WayPoint1 := rt.NextWayPoint();
			WayPoint2 := rt.getNextRouteElement();
		);
	
	public IsFinished: () ==> bool
			IsFinished() == rt.RouteDone();
			
	public setLookAheadDistance: RealPort ==> ()
			setLookAheadDistance(l)==(
				LookAheadDistance := l.getValue();
			);
		
	public UpdateRoute: seq of real ==> ()
		UpdateRoute(PosGNSS) == (
			
			dcl phi: real := 0;
			dcl dist: real := 0;
			dcl waypointX: real := 0;
			dcl waypointY: real := 0;
			
			if(time >= 200000000) then (
								
			waypointX := rt.getCurrentRouteElement().PosX();
			waypointY := rt.getCurrentRouteElement().PosY();
			
			phi := atan2(waypointY-PosGNSS(2),waypointX-PosGNSS(1));
			dist := MATH`sqrt((waypointX-PosGNSS(1))*(waypointX-PosGNSS(1))+(waypointY-PosGNSS(2))*(waypointY-PosGNSS(2)));
			
	while (bounding(phi,PosGNSS(3)) or LookAheadDistance > dist) and (not IsFinished()) do
	(
		WayPoint1 := rt.NextWayPoint();
		WayPoint2 := rt.getNextRouteElement();--

		waypointX := rt.getCurrentRouteElement().PosX();
		waypointY := rt.getCurrentRouteElement().PosY();
			
		phi := atan2(waypointY-(PosGNSS(2)),(waypointX-PosGNSS(1)));
		dist := MATH`sqrt((waypointX-PosGNSS(1))*(waypointX-PosGNSS(1))+(waypointY-PosGNSS(2))*(waypointY-PosGNSS(2)));
	);
			);
		);

	private bounding: real*real ==> bool
		bounding(phi1,phi2) ==
		(
			return MATH`pi/2 < abs(atan2(MATH`sin(phi1-phi2), MATH`cos(phi1-phi2)));
		);

	public getWayPoint1: () ==> WayPoint
		getWayPoint1() == return WayPoint1;
	
	public getWayPoint2: () ==> WayPoint
		getWayPoint2() == return WayPoint2;
		
	private atan2: real * real ==> real
		atan2(y,x) == (
			dcl result: real;
			result := 0;
			
			if x > 0 then
			(
				result := MATH`atan(y/x);
			);
			if y>= 0 and x < 0 then
			(
				result := MATH`atan(y/x)+MATH`pi;
			);
			if y< 0 and x < 0 then
			(
				result := MATH`atan(y/x)-MATH`pi;
			);
			if y > 0 and x = 0 then
			(
				result := MATH`pi/2.0;
			);
			if y < 0 and x = 0 then
			(
				result := -MATH`pi/2.0;
			);
			return result;
		);

end GuidanceController
class PID is subclass of DTControl

instance variables

-- design parameters
protected k: real; -- Proportional gain factor
protected tauI: real; -- Integral time factor
protected tauD: real; -- Derivative time factor
protected beta: real; -- Tameness/filter factor
inv InvDPs(tauI,tauD,beta);

-- variables
protected uP: real;
protected uI: real;
protected uD: real;
protected prev_err: real

functions

InvDPs: real * real * real -> bool
InvDPs(tauI_, tauD_, beta_) ==
  beta_ > 0 and beta_ <= 1 and tauI_ > 0 and tauD_ > 0
  -- If beta_ := 1 you have an IP-D controller

operations

-- constructor for PID
public PID: real * real * real * real ==> PID
PID(k_, tauI_, tauD_, beta_) ==
(
  -- set design parameters
  k := k_;
  tauI := tauI_;
  tauD := tauD_;
  beta := beta_;
  
  -- initial values
  uP := 0;
  uD := 0;
  uI := 0;
  prev_err := 0
)
pre InvDPs(tauI_,tauD_,beta_);

-- constructor for PID
public PID: real * real * real ==> PID
PID(k_, tauI_, tauD_) ==
  PID(k_, tauI_, tauD_, DEF_BETA)
pre InvDPs(tauI_,tauD_,DEF_BETA);

-- default constructor for PID
public PID: () ==> PID
PID() ==
  PID(DEF_K, DEF_TAUI, DEF_TAUD, DEF_BETA);

public updataParams: real*real*real ==> ()
updataParams(p_wc, i_wo, d_b0) ==
(
 	k := p_wc;
  tauI := i_wo;
  tauD := d_b0;
);


-- calculates output, based on the error
public Output: real ==> real
Output(err) == 
 (dcl factor: real :=  1 / (sampletime + tauD * beta);
  uD := factor * (tauD *  uD  * beta + tauD * k * (err - prev_err) + 
        sampletime * k * err);
  uI := uI + sampletime * tauD / tauI;
  prev_err := err;
  return uI + uD
)
pre sampletime <> nil and
    sampletime >= 0; 
-- sampletime must have a positive value, 
-- since we are moving forward in time and using time dependent factors

values
-- default control factors
  DEF_K: real = 0.2;
  DEF_TAUI: real = 0.5;
  DEF_TAUD: real = 1.0;
  DEF_BETA: real = 0.1;

end PID
class PD is subclass of DTControl

instance variables

-- design parameters
protected k: real; -- Proportional gain factor
protected tauD: real; -- Derivative time factor
protected beta: real; -- Tameness/filter factor

-- variables
protected uD: real;
protected prev_err: real

functions

InvDPs: real * real -> bool
InvDPs(tauD_, beta_) ==
  beta_ > 0 and beta_ <= 1 and tauD_ > 0
  -- If beta_ := 1 you have an P-D controller

operations

-- constructor for PD
public PD: real * real * real ==> PD
PD(k_, tauD_, beta_) ==
(
  k := k_;
  tauD := tauD_;
  beta := beta_;
  -- initial values
  uD := 0.0;
  prev_err := 0.0  
)
pre InvDPs(tauD_,beta_);

-- constructor for PD
public PD: real * real ==> PD
PD(k_, tauD_) ==
  PD(k_, tauD_, DEF_BETA)
pre InvDPs(tauD_,DEF_BETA);

    
-- default constructor for PD
public PD: () ==> PD
PD() ==
    PD(DEF_K, DEF_TAUD, DEF_BETA)
pre InvDPs(DEF_TAUD,DEF_BETA);

-- calculates output, based on the error
public Output: real ==> real
Output(err) == 
(
  dcl factor: real :=  1 / (sampletime + tauD * beta);
  uD := factor * (tauD * uD * beta + tauD * k * (err - prev_err) + sampletime * k * err);
  prev_err := err;
  return uD
)
pre sampletime <> nil and
    sampletime >= 0; 
-- sampletime must have a positive value, 
-- since we are moving forward in time and using time dependent factors

values

-- defaults
DEF_K: real = 0.2;
DEF_TAUD: real = 1.0;
DEF_BETA: real = 0.1;

end PD